# Configuration for a Visage master.

# The debug modes to activate. Valid entries:
# - slave: Include an X-Visage-Slave header containing the name of the
#          slave that serviced this request.
# - cache: Include an X-Visage-Cache header containing one of "hit",
#          "miss", or "expire", depending on whether or not the master
#          served this request from the cache.
# - error: When an error occurs, serve up a raw stack trace instead of a
#          generic error page.
debug: ["slave", "cache", "error"]

# What to expose in the headers. Valid entries:
# - server: Include the X-Powered-By header.
# - version: Append the Visage version to the X-Powered-By header.
expose: ["server", "version"]

# Which modes to allow requests for. Valid entries:
# - face: 2D renders consisting of just the front of the head.
# - head: 3D renders of the entire head and helm.
# - portrait: 3D renders of the head, arms, and torso.
# - player: 3D renders of the entire player.
# - skin: The player's skin, including internal format modifications by Visage.
modes: ["face", "head", "portrait", "player", "skin"]

# Which parameters to allow requests to set. Valid entries:
# - yaw (float): The degrees of rotation to apply on the Y axis.
# - pitch (float): The degrees of rotation to apply on the X axis.
# - roll (float): The degrees of rotation to apply on the Z axis. Looks
#         rather silly and has no real use, so it is disabled by default.
# - shadow (boolean): Whether or not to render the shadow underneath
#                     the player.
# - hat (boolean): Whether or not to include the second head layer.
# - lsleeve (boolean): Whether or not to include the second left arm layer.
# - rsleeve (boolean): Whether or not to include the second right arm layer.
# - lpant (boolean): Whether or not to include the second left leg layer.
# - rpant (boolean): Whether or not to include the second right leg layer.
# - cape (boolean): Whether or not to include the player's cape, if present.
parameters: ["yaw", "pitch", "shadow", "hat", "lsleeve", "rsleeve", "jacket", "lpant", "rpant", "cape"]

# Whether or not to allow requests with names to be made. When they are,
# the name will be resolved to a UUID using Mojang's API. This can be slow.
lookup-names: true

# The file to log to. This can be set to /dev/null to suppress logging.
log: "logs/access.log"

# Set to true to enable pretty colors in the console.
ansi: true

cache {
	# If caching is disabled, skin data caching will use Google Guava. Mojang's
	# API requires caching, as skin data can only be retrieved every minute. If
	# enabled, Visage will use Apache JCS.
	enabled: true
	# The mode for the memory cache. Valid values:
	# - LRU: (default) Least Recently Used
	# - LHMLRU: (test) LinkedHashMap-based Least Recently Used
	# - MRU: Most Recently Used
	# - FIFO: First In First Out
	# - ARC: (experimental) Adaptive Replacement Cache
	mode: LRU
	# The Skin cache stores skins retrieved from Mojang; they are 64x64 PNGs
	# averaging 3KiB.
	skin {
		heap {
			limit: 1000
		}
	}
	render {

	}
}

# Global render settings that apply to all slaves.
render {
	# How much supersampling to apply. This is seen as a multiplier to the base
	# render resolution. So, a 512x512 render with 4x supersampling will be
	# rendered as 2048x2048 and then downscaled. This reduces jagged edges.
	# Set this value to 1 to disable supersampling.
	supersampling: 4
	# The maximum amount of time to wait for a slave to return a render.
	timeout: 5 seconds
	# The minimum width and/or height to allow for requests.
	min-size: 32
	# The maximum width and/or height to allow for requests. Putting this over
	# 512 will make weird things happen.
	max-size: 512
}

http {
	# The local address to bind the HTTP server to.
	bind: 127.0.0.1
	# The port to bind the HTTP server to.
	port: 3000
	# A path to a directory containing all static files that should be served
	# by Visage when a request to a non-avatar URL is made. It's a good idea
	# to put an index.html in here, as well as any other needed files. Maybe
	# an index.css?
	static: "./www"
}

rabbitmq {
	# The host to connect to for the RabbitMQ queue.
	host: 127.0.0.1
	# The port RabbitMQ is running on.
	port: 5672
	# The credentials to use to connect to RabbitMQ.
	# Uncomment these if you need them.
	#user: myuser
	#password: s0m3aw3s0m3p4ssw0rd!
	# The name of the queue to use. It will be automatically created on start if
	# it does not exist.
	queue: "visage"
}

slave {
	# Whether or not to enable the master's fallback slave.
	enable: true
	# The name of the slave. This is only for reference.
	name: "fallback"
	# The weight of this slave. The higher the value, the more likely it is this
	# slave will be picked for doing a render.
	weight: -1
	# The amount of separate render threads to create. This is how many concurrent
	# renders this slave can handle. The slave will create (renderers*5) pbuffers.
	renderers: 1
	# The maximum amount of messages to queue up for this slave. -1 represents no
	# limit.
	qos: 1
	# Whether or not to allow LWJGL to fall back to software rendering if this slave
	# does not have a GPU.
	allowSoftware: true
}