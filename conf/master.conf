# Configuration for a Visage master.

# The debug modes to activate. Valid entries:
# - slave: Include an X-Visage-Slave header containing the name of the
#          slave that serviced this request.
# - cache: Include an X-Visage-Cache header containing one of "hit",
#          "miss", or "expire", depending on whether or not the master
#          served this request from the cache.
# - error: When an error occurs, serve up a raw stack trace instead of a
#          generic error page.
# Invalid entries are ignored.
debug: ["slave", "cache", "error"]

# What to expose in the headers. Valid entries:
# - server: Include the X-Powered-By header.
# - version: Append the Visage version to the X-Powered-By header.
# Invalid entries are ignored.
expose: ["server", "version"]

# Which modes to allow requests for. Valid entries:
# - face: 2D renders consisting of just the front of the head.
# - head: 3D renders of the entire head and helm.
# - portrait: 3D renders of the head, arms, and torso.
# - player: 3D renders of the entire player.
# - skin: The player's skin, including internal format modifications by Visage.
# Invalid entries are ignored.
modes: ["face", "head", "portrait", "player", "skin"]

# Which parameters to allow requests to set. Valid entries:
# - yaw (float): The degrees of rotation to apply on the Y axis.
# - pitch (float): The degrees of rotation to apply on the X axis.
# - roll (float): The degrees of rotation to apply on the Z axis. Looks
#         rather silly and has no real use, so it is disabled by default.
# - shadow (boolean): Whether or not to render the shadow underneath
#                     the player.
# - hat (boolean): Whether or not to include the second head layer.
# - lsleeve (boolean): Whether or not to include the second left arm layer.
# - rsleeve (boolean): Whether or not to include the second right arm layer.
# - lpant (boolean): Whether or not to include the second left leg layer.
# - rpant (boolean): Whether or not to include the second right leg layer.
# - cape (boolean): Whether or not to include the player's cape, if present.
# Invalid entries are ignored.
parameters: ["yaw", "pitch", "shadow", "hat", "lsleeve", "rsleeve", "jacket", "lpant", "rpant", "cape"]

# Whether or not to allow requests with names to be made. When they are,
# the name will be resolved to a UUID using Mojang's API. This can be slow.
lookup-names: true

# The file to log to. This can be set to /dev/null to suppress logging.
log: logs/access.log

# Set to true to enable pretty colors in the console.
ansi: true

cache {
	# If caching is disabled, skin data caching will use Google Guava. Mojang's
	# API requires caching, as skin data can only be retrieved every minute. If
	# enabled, Visage will use Apache JCS.
	enabled: true
	# The Skin cache stores player skin data. These are 64x64 PNGs averaging
	# 3 KiB. It also stores capes, which are 22x17 PNGs averaging 1 KiB.
	skin {
		# When skin data is at least this old, Visage will re-request it from
		# Mojang. This value MUST be greater than 1 minute. If the data has
		# changed since the previous request, the data will be invalidated
		# and skins (eventually) re-downloaded. If it hasn't changed, no further
		# requests will be made and the cached data will be kept.
		check-freq: 2 hours
		# Configuration for the heap (memory) cache.
		heap {
			# The maximum size of this cache, in entries.
			limit: 1000
			# The eviction policy for this cache. Valid values:
			# - LRU: Least Recently Used
			# - LHMLRU: (test) LinkedHashMap-based Least Recently Used
			# - MRU: Most Recently Used
			# - FIFO: First In First Out
			# - ARC: (default) Adaptive Replacement Cache
			policy: ARC
		}
		# Configuration for the non-persistent disk cache.
		swap {
			# A path to a directory to use for this disk cache. It is
			# recommended to place this on a fast disk. If the directory
			# does not exist, it is created.
			path: cache/swap/skin
			# The maximum size of this cache, in bytes.
			limit: 4 GiB
			policy: LRU
		}
		# Configuration for the persistent database cache.
		jdbc {
			# Whether or not to use the jdbc persistent cache.
			enabled: true
			# The driver to use. For example, if you loaded the MySQL
			# Connector/J by placing it in the 'lib' folder, this should be
			# com.mysql.jdbc.Driver - The default value of 'org.h2.Driver'
			# uses the built-in H2 database engine which saves to a file.
			driver: org.h2.Driver
			# The JDBC uri to connect to. For H2, this should be
			# jdbc:h2:<filename> - where <filename> is the path to the file.
			# The default value of 'jdbc:h2:cache/skin.db' saves the JDBC cache to
			# a file called skin.db in the cache directory. For MySQL
			# Connector/J, this should be something like 'jdbc:mysql://localhost/db'.
			uri: "jdbc:h2:cache/skin.db"
			# The username to connect to the database with.
			username: visage
			# The password to connect to the database with. Can be blank.
			password: ""
		}
	}
	# The Render cache stores baked PNG renders as received from slaves.
	# These can range from 32x32 to 512x512 with the default settings,
	# and have wildly varying sizes.
	render {
		# Whether or not to use the render cache. If set to false, every
		# request will result in a render being requested from a slave.
		enabled: true
		heap {
			limit: 48
			policy: ARC
		}
		swap {
			path: cache/swap/render
			limit: 4 GiB
			policy: LRU
		}
		jdbc {
			enabled: true
			driver: org.h2.Driver
			uri: "jdbc:h2:cache/render.db"
			username: visage
			password: ""
		}
	}
}

# Global render settings that apply to all slaves.
render {
	# How much supersampling to apply. This is seen as a multiplier to the base
	# render resolution. So, a 512x512 render with 4x supersampling will be
	# rendered as 2048x2048 and then downscaled. This reduces jagged edges.
	# Set this value to 1 to disable supersampling.
	supersampling: 4
	# The maximum amount of time to wait for a slave to return a render.
	timeout: 5 seconds
	# The minimum width and/or height to allow for requests.
	min-size: 32
	# The default width and/or height for a request with no size.
	default-size: 128
	# The maximum width and/or height to allow for requests. Putting this over
	# 512 will make weird things happen.
	max-size: 512
}

http {
	# The local address to bind the HTTP server to.
	bind: 127.0.0.1
	# The port to bind the HTTP server to.
	port: 3000
	# A path to a directory containing all static files that should be served
	# by Visage when a request to a non-avatar URL is made. It's a good idea
	# to put an index.html in here, as well as any other needed files. Maybe
	# an index.css?
	static: "./www"
}

rabbitmq {
	# The host to connect to for the RabbitMQ queue.
	host: 127.0.0.1
	# The port RabbitMQ is running on.
	port: 5672
	# The credentials to use to connect to RabbitMQ.
	# Uncomment these if you need them.
	#user: myuser
	#password: s0m3aw3s0m3p4ssw0rd!
	# The name of the queue to use. It will be automatically created on start if
	# it does not exist.
	queue: "visage"
}

slave {
	# Whether or not to enable the master's fallback slave.
	enable: true
	# The name of the slave. This is only for reference.
	name: "fallback"
	# The weight of this slave. The higher the value, the more likely it is this
	# slave will be picked for doing a render.
	weight: -1
	# The amount of separate render threads to create. This is how many concurrent
	# renders this slave can handle. The slave will create (renderers*5) pbuffers.
	renderers: 1
	# The maximum amount of messages to queue up for this slave. -1 represents no
	# limit.
	qos: 1
	# Whether or not to allow LWJGL to fall back to software rendering if this slave
	# does not have a GPU.
	allowSoftware: true
}