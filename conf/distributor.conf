# Configuration for a Visage distributor.

# The debug modes to activate. Valid entries:
# - renderer: Include an X-Visage-Renderer header containing the name of the
#             renderer that serviced this request.
# - cache: Include an X-Visage-Cache-Miss header containing a list of
#          things that could not be retrieved from the cache, or the string
#          'none' if everything was served from the cache.
# - error: When an error occurs, serve up a raw stack trace instead of a
#          generic error page.
# Invalid entries are ignored.
debug: ["renderer", "cache", "error"]

# What to expose in the headers. Valid entries:
# - server: Include the X-Powered-By header.
# - version: Append the Visage version to the X-Powered-By header.
# Invalid entries are ignored.
expose: ["server", "version"]

# Which modes to allow requests for. Valid entries:
# - face: 2D renders consisting of just the front of the head.
# - head: 3D renders of the entire head and helm.
# - bust: 3D renders of the head, arms, and torso.
# - full: 3D renders of the entire player.
# - skin: The player's skin, including internal format modifications by Visage.
# - player: Lapitar compatibiltity; takes width as an argument instead of height
# - portrait: Lapitar compatibility; direct forward to bust
# - helm: Lapitar compatibility; direct forward to face
# Invalid entries are ignored.
modes: ["face", "head", "bust", "full", "skin", "player", "helm", "portrait", "front", "frontfull"]

# Which parameters to allow requests to set. Valid entries:
# - yaw (float): The degrees of rotation to apply on the Y axis.
# - pitch (float): The degrees of rotation to apply on the X axis.
# - roll (float): The degrees of rotation to apply on the Z axis. Looks
#         rather silly and has no real use, so it is disabled by default.
# - shadow (boolean): Whether or not to render the shadow underneath
#                     the player.
# - hat (boolean): Whether or not to include the second head layer.
# - lsleeve (boolean): Whether or not to include the second left arm layer.
# - rsleeve (boolean): Whether or not to include the second right arm layer.
# - lpant (boolean): Whether or not to include the second left leg layer.
# - rpant (boolean): Whether or not to include the second right leg layer.
# - cape (boolean): Whether or not to include the player's cape, if present.
# Invalid entries are ignored.
parameters: ["yaw", "pitch", "shadow", "hat", "lsleeve", "rsleeve", "jacket", "lpant", "rpant", "cape"]

# Whether or not to allow requests with names to be made. When they are,
# the name will be resolved to a UUID using Mojang's API. This can be slow.
lookup-names: true

# The file to log to. This can be set to /dev/null to suppress logging.
log: logs/access.log

# Set to true to enable pretty colors in the console.
ansi: true

# The base URL for this Visage instance, with no trailing slash.
base-url: "http://localhost:3000"

# Global render settings that apply to all renderers.
render {
	# The maximum amount of time to wait for a renderer.
	timeout: 2 seconds
	
	# The maximum amount of times to re-request a render after it fails.
	tries: 5
	
	# The minimum width and/or height to allow for requests.
	min-size: 32
	
	# The default width and/or height for a request with no size.
	default-size: 256
	
	# The maximum width and/or height to allow for requests. Putting this over
	# 512 will make weird things happen. The max height for 'full' requests will
	# be this number, times 1.625, rounded down.
	max-size: 512
	
	# The amount of pixels between size steps. This can prevent filling your cache
	# with trivially different renders. Renders with non-conforming sizes will be
	# rounded to the nearest size.
	size-granularity: 16
}

http {
	# The local address to bind the HTTP server to.
	bind: 0.0.0.0
	# The port to bind the HTTP server to.
	port: 3000
	
	# A path to a directory containing all static files that should be served
	# by Visage when a request to a non-avatar URL is made. It's a good idea
	# to put an index.html in here, as well as any other needed files. Maybe
	# an index.css?
	static: "./www"
}

rabbitmq {
	host: 127.0.0.1
	port: 5672
	
	# The credentials to use to connect to RabbitMQ.
	# Uncomment these if you need them.
	#user: myuser
	#password: s0m3aw3s0m3p4ssw0rd!
	
	# The name of the queue to use. It will be automatically created on start if
	# it does not exist.
	queue: "visage"
}

# N.B: Visage only uses TTL-based expiration. Others types of expiration must be
# configured on the Redis server.
redis {
	host: 127.0.0.1
	port: 6379
	# Uncomment if you need it.
	#password: th1s1smyr3d15serv3r-th3r34rem4nyl1k3itbu7th1sone-1s-m1n3
	
	# The maximum amount of Redis connections to allow at once.
	max-total-connections: 16
	
	# The maximum amount of idle Redis connections to allow at once.
	max-idle-connections: 8
	
	# The amount of idle Redis connections to keep open.
	min-idle-connections: 2
	
	# The database number to use for the username -> UUID resolver cache.
	resolver-db: 3
	resolver-ttl: 7 days
	
	# The database number to use for the UUID -> Skin cache.
	skin-db: 4
	skin-ttl: 1 day
	
	# If you're wondering where the caching for renders is, that job should be
	# done by the proxy in front of Visage (you are running a proxy, right?)
	# Whether it is nginx, Varnish, CloudFlare or anything else doesn't matter;
	# it will probably do response caching way better than Visage ever could.
}

renderer {
	# Whether or not to enable the distributor fallback renderer.
	# Generally only useful for debugging. It's greatly preferable to run the
	# renderer in a separate process, even if it's on the same machine.
	enable: true
	
	# The name of the renderer. This is only for reference.
	name: "fallback"
	
	# The weight of this renderer. The higher the value, the more likely it is
	# this renderer will be picked.
	weight: -1
	
	# The amount of separate render threads to create. This is how many
	# concurrent renders this renderer can handle.
	renderers: 1
	
	# The maximum amount of messages to queue up for this renderer.
	# Use -1 for no limit.
	qos: 1
	
	# If true, the render window will be visible. This can be useful for debugging.
	visible: true
	
	# Setting this to true will make Visage render the same skin 60 times a second.
	# Useful for debugging. Uses the test skin. Doesn't do anything you can see if
	# visible is false.
	continuous: false
	
	# If true, pngquant will be run on images before sending them back to the
	# distributor. Requires pngquant to be on the path.
	pngquant: true
}
